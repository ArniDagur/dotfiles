#!/usr/bin/env python3
import argparse
from pathlib import Path
import sys
import subprocess
import os
import re


def unflatten_directory(
    directory: Path, destination: str, pretend: bool = False
) -> None:
    destination_path = directory / destination
    if not pretend:
        os.mkdir(destination_path)
    else:
        print(f"mkdir {destination_path}")
    cmd = [
        "find",
        str(directory),
        "-mindepth",
        "1",
        "-maxdepth",
        "1",
        "-exec",
    ]
    if pretend:
        cmd.append("echo")
    cmd += [
        "mv",
        "-n",
        "{}",
        str(destination_path),
        ";",
    ]
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        fail(f"Failed with exception: {e!r}")


def filename(s: str):
    match = re.match(r"^[^\s\/]+$", s)
    if not match:
        raise ValueError()
    return s


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Unflatten a directory")
    parser.add_argument(
        "destination",
        metavar="DEST",
        type=filename,
        nargs=1,
        help="The destination directory name",
    )
    parser.add_argument(
        "directory",
        metavar="DIR",
        type=Path,
        default=Path.cwd(),
        nargs="?",
        help="The directory to unflatten",
    )
    parser.add_argument(
        "-p",
        "--pretend",
        action="store_true",
        help="Only pretend to flatten the given directory",
    )
    return parser.parse_args()


def fail(msg: str) -> None:
    print("flatten: " + msg, file=sys.stderr)
    exit(1)


def main() -> None:
    args = parse_arguments()
    directory: Path = args.directory
    destination: str = args.destination[0]

    if not directory.exists():
        fail(f"Given path does not exist: '{directory}'")

    unflatten_directory(directory, destination, pretend=args.pretend)


if __name__ == "__main__":
    main()
