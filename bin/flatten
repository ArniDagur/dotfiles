#!/usr/bin/env python
import argparse
from pathlib import Path
import sys
import subprocess


def flatten_directory(directory: Path, pretend: bool = False) -> None:
    cmd = [
        "find",
        str(directory),
        "-mindepth",
        "1",
        "-maxdepth",
        "1",
        "-exec",
    ]
    if pretend:
        cmd.append("echo")
    cmd += [
        "mv",
        "-t",
        str(directory.parent),
        "{}",
        "+",
    ]
    try:
        subprocess.run(cmd, check=True)
        if not pretend:
            directory.rmdir()
        else:
            print(f"rmdir {directory}")
    except subprocess.CalledProcessError as e:
        fail(f"Failed with exception: {e!r}")


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Flatten a directory")
    parser.add_argument(
        "directory",
        metavar="DIR",
        type=Path,
        default=Path.cwd(),
        nargs=1,
        help="The directory to flatten",
    )
    parser.add_argument(
        "-p",
        "--pretend",
        action="store_true",
        help="Only pretend to flatten the given directory",
    )
    return parser.parse_args()


def fail(msg: str) -> None:
    print("flatten: " + msg, file=sys.stderr)
    exit(1)


def main() -> None:
    args = parse_arguments()
    path = args.directory[0]
    if not path.exists():
        fail("Given path does not exist")
    if not path.is_dir():
        fail("Given path is not a directory")
    flatten_directory(path, pretend=args.pretend)


if __name__ == "__main__":
    main()
