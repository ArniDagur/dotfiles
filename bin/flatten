#!/usr/bin/env python3
import argparse
from pathlib import Path
import sys
import subprocess


def flatten_directory(directory: Path, pretend: bool = False) -> None:
    cmd = [
        "find",
        str(directory),
        "-mindepth",
        "1",
        "-maxdepth",
        "1",
        "-exec",
    ]
    if pretend:
        cmd.append("echo")
    cmd += [
        "mv",
        "-n",
        "{}",
        str(directory.parent),
        ";",
    ]
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        fail(f"Failed with exception: {e!r}")
    if not pretend:
        directory.rmdir()
    else:
        print(f"rmdir {directory}")


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Flatten directories")
    parser.add_argument(
        "directory",
        metavar="DIR",
        type=Path,
        default=Path.cwd(),
        nargs="+",
        help="The directories to flatten",
    )
    parser.add_argument(
        "-p",
        "--pretend",
        action="store_true",
        help="Only pretend to flatten the given directories",
    )
    return parser.parse_args()


def fail(msg: str) -> None:
    print("flatten: " + msg, file=sys.stderr)
    exit(1)


def main() -> None:
    args = parse_arguments()
    directory: list[Path] = args.directory

    # Fail early before performing any operations, if some of the paths are
    # not valid.
    for path in directory:
        if not path.exists():
            fail(f"Given path does not exist: '{path}'")
        if not path.is_dir():
            fail(f"Given path is not a directory: '{path}'")

    for path in directory:
        flatten_directory(path, pretend=args.pretend)


if __name__ == "__main__":
    main()
